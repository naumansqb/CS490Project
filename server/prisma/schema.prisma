generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  userId              String           @id @map("user_id")
  firstName           String?          @map("first_name") @db.VarChar(100)
  lastName            String?          @map("last_name") @db.VarChar(100)
  preferredName       String?          @map("preferred_name") @db.VarChar(100)
  email               String?          @db.VarChar(255)
  phone_number        String?          @db.VarChar(20)
  headline            String?          @db.VarChar(255)
  bio                 String?
  profilePhotoUrl     String?          @map("profile_photo_url") @db.VarChar(500)
  industry            String?          @db.VarChar(100)
  locationCity        String?          @map("location_city") @db.VarChar(100)
  locationState       String?          @map("location_state") @db.VarChar(100)
  locationCountry     String?          @map("location_country") @db.VarChar(100)
  willingToRelocate   Boolean?         @default(false) @map("willing_to_relocate")
  linkedinUrl         String?          @map("linkedin_url") @db.VarChar(255)
  githubUrl           String?          @map("github_url") @db.VarChar(255)
  portfolioUrl        String?          @map("portfolio_url") @db.VarChar(255)
  websiteUrl          String?          @map("website_url") @db.VarChar(255)
  yearsOfExperience   Decimal?         @map("years_of_experience") @db.Decimal(4, 1)
  careerLevel         String?          @map("career_level") @db.VarChar(50)
  desiredSalaryMin    Decimal?         @map("desired_salary_min") @db.Decimal(12, 2)
  desiredSalaryMax    Decimal?         @map("desired_salary_max") @db.Decimal(12, 2)
  salaryCurrency      String?          @default("USD") @map("salary_currency") @db.VarChar(10)
  openToOpportunities Boolean?         @default(true) @map("open_to_opportunities")
  jobSearchStatus     String?          @map("job_search_status") @db.VarChar(50)
  preferredWorkType   String?          @map("preferred_work_type") @db.VarChar(50)
  profileCompleteness Int?             @default(0) @map("profile_completeness")
  profileVisibility   String?          @default("private") @map("profile_visibility") @db.VarChar(50)
  createdAt           DateTime?        @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime?        @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  certifications      Certification[]
  education           Education[]
  skills              Skill[]
  specialProjects     SpecialProject[]
  workExperiences     WorkExperience[]

  @@index([userId], map: "idx_user_profiles_user_id")
  @@map("user_profiles")
}

model WorkExperience {
  id              String      @id @default(dbgenerated("uuid_generate_v4()"))
  userId          String      @map("user_id")
  companyName     String      @map("company_name") @db.VarChar(255)
  positionTitle   String      @map("position_title") @db.VarChar(255)
  employmentType  String?     @map("employment_type") @db.VarChar(50)
  locationCity    String?     @map("location_city") @db.VarChar(100)
  locationState   String?     @map("location_state") @db.VarChar(100)
  locationCountry String?     @map("location_country") @db.VarChar(100)
  isRemote        Boolean?    @default(false) @map("is_remote")
  startDate       DateTime    @map("start_date") @db.Date
  endDate         DateTime?   @map("end_date") @db.Date
  isCurrent       Boolean?    @default(false) @map("is_current")
  description     String?
  displayOrder    Int?        @default(0) @map("display_order")
  createdAt       DateTime?   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  userProfile     UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)

  @@index([startDate, endDate], map: "idx_work_exp_dates")
  @@index([userId, displayOrder], map: "idx_work_exp_display_order")
  @@index([userId], map: "idx_work_exp_user_id")
  @@map("work_experiences")
}

model Education {
  id              String      @id @default(dbgenerated("uuid_generate_v4()"))
  userId          String      @map("user_id")
  institutionName String      @map("institution_name") @db.VarChar(255)
  degreeType      String?     @map("degree_type") @db.VarChar(100)
  major           String?     @db.VarChar(255)
  minor           String?     @db.VarChar(255)
  gpa             Decimal?    @db.Decimal(3, 2)
  gpaScale        Decimal?    @default(4.00) @map("gpa_scale") @db.Decimal(3, 2)
  showGpa         Boolean?    @default(false) @map("show_gpa")
  startDate       DateTime?   @map("start_date") @db.Date
  endDate         DateTime?   @map("end_date") @db.Date
  isCurrent       Boolean?    @default(false) @map("is_current")
  graduationDate  DateTime?   @map("graduation_date") @db.Date
  locationCity    String?     @map("location_city") @db.VarChar(100)
  locationState   String?     @map("location_state") @db.VarChar(100)
  locationCountry String?     @map("location_country") @db.VarChar(100)
  honors          String[]
  activities      String[]
  description     String?
  displayOrder    Int?        @default(0) @map("display_order")
  createdAt       DateTime?   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt       DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  userProfile     UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)

  @@index([startDate, endDate], map: "idx_education_dates")
  @@index([degreeType], map: "idx_education_degree_type")
  @@index([userId], map: "idx_education_user_id")
  @@map("education")
}

model Skill {
  id                String      @id @default(dbgenerated("uuid_generate_v4()"))
  userId            String      @map("user_id")
  skillName         String      @map("skill_name") @db.VarChar(100)
  skillCategory     String?     @map("skill_category") @db.VarChar(100)
  proficiencyLevel  String?     @map("proficiency_level") @db.VarChar(50)
  yearsOfExperience Decimal?    @map("years_of_experience") @db.Decimal(4, 1)
  displayOrder      Int?        @default(0) @map("display_order")
  createdAt         DateTime?   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt         DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  userProfile       UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, skillName])
  @@index([skillCategory], map: "idx_skills_category")
  @@index([skillName], map: "idx_skills_name")
  @@index([proficiencyLevel], map: "idx_skills_proficiency")
  @@index([userId], map: "idx_skills_user_id")
  @@map("skills")
}

model Certification {
  id                  String      @id @default(dbgenerated("uuid_generate_v4()"))
  userId              String      @map("user_id")
  name                String      @db.VarChar(255)
  issuingOrganization String      @map("issuing_organization") @db.VarChar(255)
  issueDate           DateTime    @map("issue_date") @db.Date
  expirationDate      DateTime?   @map("expiration_date") @db.Date
  doesNotExpire       Boolean?    @default(false) @map("does_not_expire")
  displayOrder        Int?        @default(0) @map("display_order")
  createdAt           DateTime?   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt           DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  userProfile         UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)

  @@index([expirationDate], map: "idx_certifications_expiration")
  @@index([userId], map: "idx_certifications_user_id")
  @@map("certifications")
}

model SpecialProject {
  id                 String      @id @default(dbgenerated("uuid_generate_v4()"))
  userId             String      @map("user_id")
  projectName        String      @map("project_name") @db.VarChar(255)
  description        String
  startDate          DateTime?   @map("start_date") @db.Date
  endDate            DateTime?   @map("end_date") @db.Date
  status             String?     @default("completed") @db.VarChar(50)
  projectUrl         String?     @map("project_url") @db.VarChar(500)
  repositoryUrl      String?     @map("repository_url") @db.VarChar(500)
  skillsDemonstrated String[]    @map("skills_demonstrated") @db.VarChar(100)
  displayOrder       Int?        @default(0) @map("display_order")
  createdAt          DateTime?   @default(now()) @map("created_at") @db.Timestamp(6)
  updatedAt          DateTime?   @default(now()) @updatedAt @map("updated_at") @db.Timestamp(6)
  userProfile        UserProfile @relation(fields: [userId], references: [userId], onDelete: Cascade, onUpdate: NoAction)

  @@index([status], map: "idx_projects_status")
  @@index([userId], map: "idx_projects_user_id")
  @@map("special_projects")
}
